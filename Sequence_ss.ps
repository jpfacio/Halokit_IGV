%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.2
%%CreationDate: Thu Jul 13 15:40:06 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCCACCGCGCGCUCACUGCCACCAAAAGAGUCAUAUCACAGCCGACCAGUUUCUGGAACGUUCCCGAUACUGGAAC\
) } def
/len { sequence length } bind def

/coor [
[95.69626617 171.45422363]
[80.89152527 173.86660767]
[66.33397675 170.25027466]
[54.37912369 161.19039917]
[46.96132660 148.15290833]
[45.28083038 133.24732971]
[49.60955429 118.88550568]
[59.24707794 107.39123535]
[72.63400269 100.62438202]
[87.60680389 99.68020630]
[75.93132782 90.26302338]
[67.04220581 87.19789886]
[63.99502182 80.24727631]
[52.69348145 70.38445282]
[39.85097885 62.63396454]
[25.85772324 57.23129654]
[11.86446857 51.82863235]
[-2.12878728 46.42596436]
[-12.88829613 57.20338821]
[-27.10350037 62.66670990]
[-42.31153107 61.86937332]
[-55.87749863 54.94952393]
[-65.45102692 43.10606384]
[-69.37343597 28.39095116]
[-66.96514893 13.35366154]
[-58.64341736 0.59950036]
[-45.85002518 -7.66179895]
[-30.80151176 -9.99891567]
[-16.10511971 -6.00692987]
[-4.30708885 3.62252188]
[2.54850173 17.22107887]
[3.27387857 32.43270874]
[17.26713371 37.83537674]
[31.26038933 43.23804092]
[45.25364685 48.64070892]
[39.76421356 34.68126297]
[42.42502975 19.91914749]
[52.44293213 8.75484276]
[66.83164978 4.51634693]
[81.30200958 8.46712494]
[91.54050446 19.42947960]
[94.49511719 34.13560867]
[89.28508759 48.20172501]
[77.46350098 57.43482208]
[62.55630493 59.08291626]
[73.85784149 68.94573975]
[85.34851074 78.58754730]
[97.02397919 88.00473022]
[105.26467133 88.86653137]
[111.08112335 94.72638702]
[125.74113464 97.90193939]
[140.40113831 101.07749939]
[155.06114197 104.25305939]
[169.72116089 107.42861938]
[184.84654236 102.78823853]
[195.64732361 113.04457855]
[210.30732727 116.22013855]
[225.43272400 111.57976532]
[236.23350525 121.83609772]
[250.89350891 125.01165771]
[265.55352783 128.18721008]
[280.99584961 122.66761017]
[293.32034302 133.48608398]
[289.84857178 149.51353455]
[274.15203857 154.26228333]
[262.37796021 142.84722900]
[247.71795654 139.67166138]
[233.05795288 136.49610901]
[218.98114014 141.36361694]
[207.13177490 130.88014221]
[192.47177124 127.70458984]
[178.39495850 132.57209778]
[166.54559326 122.08862305]
[151.88558960 118.91306305]
[137.22558594 115.73751068]
[122.56557465 112.56195068]
[107.90557098 109.38639069]
[116.56971741 121.63108063]
[119.70812225 136.29908752]
[116.81297302 151.01704407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 48]
[11 47]
[13 46]
[14 45]
[15 35]
[16 34]
[17 33]
[18 32]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
